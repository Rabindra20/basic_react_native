{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _NewAppScreen = require(\"react-native/Libraries/NewAppScreen\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"D:\\\\git\\\\basic_react_native\\\\App.tsx\",\n  _this = this;\nvar lastname = \"Sah\";\nfunction App() {\n  var isDarkMode = (0, _reactNative.useColorScheme)() === 'dark';\n  var midlename = \"Raj\";\n  return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n    style: {\n      backgroundColor: isDarkMode ? _NewAppScreen.Colors.black : _NewAppScreen.Colors.white\n    },\n    children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {\n      style: {\n        fontSize: 30\n      },\n      children: [\"Hi Rabindra \", midlename, \" \", lastname]\n    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: {\n        fontSize: 20\n      },\n      children: lastname === \"Sah\" ? \"Above info is correct\" : \"Above info is wrong\"\n    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {\n      title: \"press here\",\n      onPress: Onpres\n    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {\n      title: \"Click here\",\n      onPress: function onPress() {\n        return Onpress(\"hello\");\n      },\n      color: \"green\"\n    })]\n  });\n}\nvar TEST = function TEST() {\n  return (0, _jsxRuntime.jsx)(_reactNative.View, {\n    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {\n      style: {\n        fontSize: 20\n      },\n      children: \"For test another component\"\n    })\n  });\n};\nvar Onpres = function Onpres() {\n  console.warn(\"Button working Fine\");\n};\n{}\nvar Onpress = function Onpress(val) {\n  console.warn(val);\n};\nvar _default = App;\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_NewAppScreen","_jsxRuntime","_jsxFileName","_this","lastname","App","isDarkMode","useColorScheme","midlename","jsxs","View","style","backgroundColor","Colors","black","white","children","Text","fontSize","jsx","Button","title","onPress","Onpres","Onpress","color","TEST","console","warn","val","_default","exports","default"],"sources":["D:/git/basic_react_native/App.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Text,\n  useColorScheme,\n  View,\n  Button,\n} from 'react-native';\n\nimport { Colors } from 'react-native/Libraries/NewAppScreen';\nimport Bio_data from './component/bio_data';\nimport Usestate from './component/usestate';\nimport Props from './component/props';\nimport Stylesheet from './component/stylesheet';\nimport Form from './component/form';\nvar lastname=\"Sah\"\nfunction App(): JSX.Element {\n  const isDarkMode = useColorScheme() === 'dark';\n  const midlename= \"Raj\"\n  \n  // const backgroundStyle = {\n  //   backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  // };\n\n  return (\n        <View\n          style={{\n            backgroundColor: isDarkMode ? Colors.black : Colors.white,\n          }}>\n          <Text style={{fontSize: 30}}>Hi Rabindra {midlename} {lastname}</Text>\n          <Text style={{fontSize: 20}}>{lastname===\"Sah\"?\"Above info is correct\":\"Above info is wrong\"}</Text>\n          {/* <TEST /> */}\n\n          {/* Implement folder wise component */}\n          {/* <Bio_data /> */}\n\n          <Button title='press here' onPress={Onpres}></Button>\n\n          {/* pass parameter in button */}\n          <Button title='Click here' onPress={()=>Onpress(\"hello\")} color={\"green\"}></Button>\n\n          {/* implement state */}\n          {/* <Usestate />  */}\n\n          {/* Implement props */}\n          {/* <Props /> */}\n\n          {/* Implement style */}\n          {/* <Stylesheet /> */}\n          \n          {/* Implement form */}\n          {/* <Form /> */}\n\n          {/* Implement array and list */}\n        </View>\n  );\n}\nconst TEST=()=>{\nreturn(\n  <View>\n  <Text style={{fontSize: 20}}>For test another component</Text>\n  </View>\n)\n};\nconst Onpres=()=>{\n  console.warn(\"Button working Fine\")\n  };\n  {/* For pass parameter in button */}\n  const Onpress=(val:string)=>{\n    console.warn(val)\n    };\nexport default App;\n"],"mappings":";;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAOA,IAAAE,aAAA,GAAAF,OAAA;AAA6D,IAAAG,WAAA,GAAAH,OAAA;AAAA,IAAAI,YAAA;EAAAC,KAAA;AAM7D,IAAIC,QAAQ,GAAC,KAAK;AAClB,SAASC,GAAGA,CAAA,EAAgB;EAC1B,IAAMC,UAAU,GAAG,IAAAC,2BAAc,GAAE,KAAK,MAAM;EAC9C,IAAMC,SAAS,GAAE,KAAK;EAMtB,OACM,IAAAP,WAAA,CAAAQ,IAAA,EAACV,YAAA,CAAAW,IAAI;IACHC,KAAK,EAAE;MACLC,eAAe,EAAEN,UAAU,GAAGO,oBAAM,CAACC,KAAK,GAAGD,oBAAM,CAACE;IACtD,CAAE;IAAAC,QAAA,GACF,IAAAf,WAAA,CAAAQ,IAAA,EAACV,YAAA,CAAAkB,IAAI;MAACN,KAAK,EAAE;QAACO,QAAQ,EAAE;MAAE,CAAE;MAAAF,QAAA,GAAC,cAAY,EAACR,SAAS,EAAC,GAAC,EAACJ,QAAQ;IAAA,EAAQ,EACtE,IAAAH,WAAA,CAAAkB,GAAA,EAACpB,YAAA,CAAAkB,IAAI;MAACN,KAAK,EAAE;QAACO,QAAQ,EAAE;MAAE,CAAE;MAAAF,QAAA,EAAEZ,QAAQ,KAAG,KAAK,GAAC,uBAAuB,GAAC;IAAqB,EAAQ,EAMpG,IAAAH,WAAA,CAAAkB,GAAA,EAACpB,YAAA,CAAAqB,MAAM;MAACC,KAAK,EAAC,YAAY;MAACC,OAAO,EAAEC;IAAO,EAAU,EAGrD,IAAAtB,WAAA,CAAAkB,GAAA,EAACpB,YAAA,CAAAqB,MAAM;MAACC,KAAK,EAAC,YAAY;MAACC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAIE,OAAO,CAAC,OAAO,CAAC;MAAA,CAAC;MAACC,KAAK,EAAE;IAAQ,EAAU;EAAA,EAe9E;AAEf;AACA,IAAMC,IAAI,GAAC,SAALA,IAAIA,CAAA,EAAK;EACf,OACE,IAAAzB,WAAA,CAAAkB,GAAA,EAACpB,YAAA,CAAAW,IAAI;IAAAM,QAAA,EACL,IAAAf,WAAA,CAAAkB,GAAA,EAACpB,YAAA,CAAAkB,IAAI;MAACN,KAAK,EAAE;QAACO,QAAQ,EAAE;MAAE,CAAE;MAAAF,QAAA,EAAC;IAA0B;EAAO,EACvD;AAET,CAAC;AACD,IAAMO,MAAM,GAAC,SAAPA,MAAMA,CAAA,EAAK;EACfI,OAAO,CAACC,IAAI,CAAC,qBAAqB,CAAC;AACnC,CAAC;AACD,CAAmC;AACnC,IAAMJ,OAAO,GAAC,SAARA,OAAOA,CAAEK,GAAU,EAAG;EAC1BF,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC;AACjB,CAAC;AAAC,IAAAC,QAAA,GACSzB,GAAG;AAAA0B,OAAA,CAAAC,OAAA,GAAAF,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}